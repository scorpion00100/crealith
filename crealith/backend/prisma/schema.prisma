generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  role          UserRole  @default(BUYER)
  stripeAccountId String? @map("stripe_account_id")
  avatar        String?
  bio           String?
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  // Google OAuth fields
  googleId      String?   @unique @map("google_id")
  googleEmail   String?   @map("google_email")
  googleName    String?   @map("google_name")
  googleAvatar  String?   @map("google_avatar")
  googleAccessToken  String? @map("google_access_token")
  googleRefreshToken String? @map("google_refresh_token")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  deletedBy     String?   @map("deleted_by")

  products      Product[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  favorites     Favorite[]
  notifications Notification[]
  transactions  Transaction[]

  @@index([email])
  @@index([googleId])
  @@index([role])
  @@index([isActive])
  @@index([deletedAt])
  @@index([isActive, deletedAt])
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  icon        String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  products    Product[]

  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id              String        @id @default(cuid())
  title           String
  description     String
  shortDescription String?      @map("short_description")
  price           Decimal       @db.Decimal(10, 2)
  originalPrice   Decimal?      @db.Decimal(10, 2) @map("original_price")
  previewUrl      String?       @map("preview_url")
  fileUrl         String        @map("file_url")
  thumbnailUrl    String        @map("thumbnail_url")
  fileSize        Int?          @map("file_size")
  fileType        String        @map("file_type")
  downloadsCount  Int           @default(0) @map("downloads_count")
  tags            String[]
  isActive        Boolean       @default(true) @map("is_active")
  isFeatured      Boolean       @default(false) @map("is_featured")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  deletedBy       String?       @map("deleted_by")

  userId          String        @map("user_id")
  categoryId      String        @map("category_id")

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category      @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  reviews         Review[]
  cartItems       CartItem[]
  favorites       Favorite[]

  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([userId])
  @@index([price])
  @@index([createdAt])
  @@index([downloadsCount])
  @@index([categoryId, isActive])
  @@index([isFeatured, createdAt])
  @@index([userId, isActive])
  @@index([deletedAt])
  @@index([isActive, deletedAt])
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @map("order_number")
  totalAmount     Decimal     @db.Decimal(10, 2) @map("total_amount")
  status          OrderStatus @default(PENDING)
  stripePaymentId String?     @map("stripe_payment_id")
  paymentMethod   String?     @map("payment_method")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")
  cancelReason    String?     @map("cancel_reason")

  userId          String      @map("user_id")

  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  transactions    Transaction[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
  @@index([orderNumber])
  @@index([deletedAt])
  @@index([status, deletedAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  orderId   String   @map("order_id")
  productId String   @map("product_id")

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([createdAt])
  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")

  userId    String   @map("user_id")
  productId String   @map("product_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("cart_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId    String   @map("user_id")
  productId String   @map("product_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@index([productId, createdAt])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  userId    String   @map("user_id")
  productId String   @map("product_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("favorites")
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // 'success', 'error', 'warning', 'info'
  title       String
  message     String
  read        Boolean  @default(false)
  actionUrl   String?  @map("action_url")
  actionLabel String?  @map("action_label")
  createdAt   DateTime @default(now()) @map("created_at")

  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([type])
  @@index([createdAt])
  @@index([userId, read])
  @@map("notifications")
}

model Transaction {
  id              String   @id @default(cuid())
  stripePaymentId String   @unique @map("stripe_payment_id")
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("eur")
  status          TransactionStatus @default(PENDING)
  type            TransactionType
  description     String?
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  userId          String   @map("user_id")
  orderId         String?  @map("order_id")

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order           Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([orderId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
  REFUNDED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  PAYMENT
  REFUND
  TRANSFER
  WITHDRAWAL
}
